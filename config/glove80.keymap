/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */
/* Include all behaviour includes needed */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    /* Custom Device-tree */
    /* Glove80 system behavior & macros */

    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };
    };
};

/ {
    #ifdef BT_DISC_CMD

    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };

        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };

        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };

        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };

    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    #else

    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    #endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };ht_lt: ht_lt {
      compatible = "zmk,behavior-hold-tap";
    
         label = "HT_LT";
         bindings = <&mo>, <&kp>;
         #binding-cells = <2>;
         tapping-term-ms = <200>;
         flavor = "balanced";};td_shift: td_shift {
      compatible = "zmk,behavior-tap-dance";
    
         label = "TD_SHIFT";
         #binding-cells = <0>;
         bindings = <&kp LSHFT>, <&caps_word>;};comma_semi: comma_semi {
      compatible = "zmk,behavior-mod-morph";
    
         label = "COMMA_SEMI";
         bindings = <&kp COMMA>, <&kp SEMI>;
         #binding-cells = <0>;
         mods = <(MOD_LSFT|MOD_RSFT)>;};dot_colon: dot_colon {
      compatible = "zmk,behavior-mod-morph";
    
         label = "DOT_COLON";
         bindings = <&kp DOT>, <&kp COLON>;
         #binding-cells = <0>;
         mods = <(MOD_LSFT|MOD_RSFT)>;};question_excl: question_excl {
      compatible = "zmk,behavior-mod-morph";
    
         label = "QUESTION_EXCL";
         bindings = <&kp QUESTION>, <&kp EXCLAMATION>;
         #binding-cells = <0>;
         mods = <(MOD_LSFT|MOD_RSFT)>;};
    };
};


/* Custom Defined Behaviors */

/ {
};

/* Automatically generated keymap */

/ {
    
      combos {
        compatible = "zmk,combos";at {
         bindings = <&kp AT_SIGN>;
         key-positions = <24 36>;};backtick {
         bindings = <&kp GRAVE>;
         key-positions = <36 48>;};hash {
         bindings = <&kp HASH>;
         key-positions = <25 37>;};backslash {
         bindings = <&kp BACKSLASH>;
         key-positions = <37 49>;};dollar {
         bindings = <&kp DOLLAR>;
         key-positions = <26 38>;};equals {
         bindings = <&kp EQUAL>;
         key-positions = <50 38>;};percent {
         bindings = <&kp PERCENT>;
         key-positions = <15 27>;};tilde {
         bindings = <&kp TILDE>;
         key-positions = <51 39>;};caret {
         bindings = <&kp CARET>;
         key-positions = <28 40>;};underscore {
         bindings = <&kp UNDERSCORE>;
         key-positions = <58 40>;};plus {
         bindings = <&kp PLUS>;
         key-positions = <29 41>;};minus {
         bindings = <&kp MINUS>;
         key-positions = <59 41>;};star {
         bindings = <&kp ASTERISK>;
         key-positions = <30 42>;};slash {
         bindings = <&kp SLASH>;
         key-positions = <60 42>;};ampersand {
         bindings = <&kp AMPERSAND>;
         key-positions = <31 43>;};pipe {
         bindings = <&kp PIPE>;left_bracket {
         bindings = <&kp LPAR>;
         key-positions = <42 41>;};right_bracket {
         bindings = <&kp RIGHT_PARENTHESIS>;
         key-positions = <43 42>;};lessthan {
         bindings = <&kp LESS_THAN>;
         key-positions = <36 37>;};greaterthan {
         bindings = <&kp GREATER_THAN>;
         key-positions = <37 38>;};lef_brace {
         bindings = <&kp LEFT_BRACE>;
         key-positions = <59 60>;};right_brace {
         bindings = <&kp RIGHT_BRACE>;
         key-positions = <60 61>;};left_sq {
         bindings = <&kp LEFT_BRACKET>;
         key-positions = <49 48>;};right_sq {
         bindings = <&kp RIGHT_BRACKET>;
         key-positions = <50 49>;};};
    
keymap {
        compatible = "zmk,keymap";


        Base {
         bindings = <
&none         &none  &none  &none  &none                                                                                       &none  &none        &none       &none           &none
&none         &none  &none  &none  &none    &none                                                                       &none  &none  &none        &none       &none           &none
&none         &kp Q  &kp W  &kp F  &kp P    &kp B                                                                       &kp J  &kp L  &kp U        &kp Y       &question_excl  &none
&kp CAPSLOCK  &kp A  &kp R  &kp S  &kp T    &kp G                                                                       &kp M  &kp N  &kp E        &kp I       &kp O           &none
&none         &kp Z  &kp X  &kp C  &kp D    &kp V  &kp LSHFT      &none      &none    &none  &none      &kp RSHFT       &kp K  &kp H  &comma_semi  &dot_colon  &kp SQT         &none
&none         &none  &none  &none  &kp TAB         &ht_lt 1 BSPC  &kp ENTER  &none    &none  &td_shift  &ht_lt 2 SPACE         &none  &none        &none       &none           &none
>;};
Editing {
         bindings = <
&trans  &trans     &trans     &trans     &trans                                                                          &trans    &trans    &trans  &trans     &trans
&trans  &trans     &trans     &trans     &trans     &trans                                                       &trans  &trans    &trans    &trans  &trans     &trans
&trans  &trans     &trans     &trans     &trans     &trans                                                       &trans  &trans    &trans    &trans  &trans     &trans
&trans  &trans     &trans     &trans     &trans     &trans                                                       &trans  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans
&trans  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp SPACE  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans    &trans    &trans  &trans     &trans
&trans  &trans     &trans     &trans     &trans                &trans  &trans  &trans    &trans  &trans  &trans          &trans    &trans    &trans  &trans     &trans
>;};
Numbers {
         bindings = <
&trans  &trans  &trans  &trans  &trans                                                                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &none   &kp N7  &kp N8  &kp N9  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&none   &kp N0  &kp N4  &kp N5  &kp N6  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &none   &kp N1  &kp N2  &kp N3  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
>;};
Magic {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                       &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                               &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                     &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                     &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none           &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB    &none  &none  &none         &none  &none  &none  &none  &none
>;
        };
    };
};
